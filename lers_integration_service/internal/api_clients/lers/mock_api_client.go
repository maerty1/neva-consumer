// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api_clients/lers/api_client.go
//
// Generated by this command:
//
//	mockgen -source=internal/api_clients/lers/api_client.go -destination=internal/api_clients/lers/mock_api_client.go -package=lers
//

// Package lers is a generated GoMock package.
package lers

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockApiClient is a mock of ApiClient interface.
type MockApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientMockRecorder
}

// MockApiClientMockRecorder is the mock recorder for MockApiClient.
type MockApiClientMockRecorder struct {
	mock *MockApiClient
}

// NewMockApiClient creates a new mock instance.
func NewMockApiClient(ctrl *gomock.Controller) *MockApiClient {
	mock := &MockApiClient{ctrl: ctrl}
	mock.recorder = &MockApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClient) EXPECT() *MockApiClientMockRecorder {
	return m.recorder
}

// ArePollingsCurrentlyRunning mocks base method.
func (m *MockApiClient) ArePollingsCurrentlyRunning(token, serverHost string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArePollingsCurrentlyRunning", token, serverHost)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArePollingsCurrentlyRunning indicates an expected call of ArePollingsCurrentlyRunning.
func (mr *MockApiClientMockRecorder) ArePollingsCurrentlyRunning(token, serverHost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArePollingsCurrentlyRunning", reflect.TypeOf((*MockApiClient)(nil).ArePollingsCurrentlyRunning), token, serverHost)
}

// GetConsumptionData mocks base method.
func (m *MockApiClient) GetConsumptionData(accountID int, token, serverHost string, measurePointID int, startDate, endDate string) ([]ConsumptionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumptionData", accountID, token, serverHost, measurePointID, startDate, endDate)
	ret0, _ := ret[0].([]ConsumptionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumptionData indicates an expected call of GetConsumptionData.
func (mr *MockApiClientMockRecorder) GetConsumptionData(accountID, token, serverHost, measurePointID, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumptionData", reflect.TypeOf((*MockApiClient)(nil).GetConsumptionData), accountID, token, serverHost, measurePointID, startDate, endDate)
}

// GetMeasurePoints mocks base method.
func (m *MockApiClient) GetMeasurePoints(token, serverHost string) ([]MeasurePoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurePoints", token, serverHost)
	ret0, _ := ret[0].([]MeasurePoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurePoints indicates an expected call of GetMeasurePoints.
func (mr *MockApiClientMockRecorder) GetMeasurePoints(token, serverHost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurePoints", reflect.TypeOf((*MockApiClient)(nil).GetMeasurePoints), token, serverHost)
}

// GetPollSessions mocks base method.
func (m *MockApiClient) GetPollSessions(token, serverHost, startDate, endDate string) (map[int]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollSessions", token, serverHost, startDate, endDate)
	ret0, _ := ret[0].(map[int]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollSessions indicates an expected call of GetPollSessions.
func (mr *MockApiClientMockRecorder) GetPollSessions(token, serverHost, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollSessions", reflect.TypeOf((*MockApiClient)(nil).GetPollSessions), token, serverHost, startDate, endDate)
}

// PollMeasurePoints mocks base method.
func (m *MockApiClient) PollMeasurePoints(token, serverHost string, measurePointIDs []int, startDate, endDate string) (*PollMeasurePointsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollMeasurePoints", token, serverHost, measurePointIDs, startDate, endDate)
	ret0, _ := ret[0].(*PollMeasurePointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PollMeasurePoints indicates an expected call of PollMeasurePoints.
func (mr *MockApiClientMockRecorder) PollMeasurePoints(token, serverHost, measurePointIDs, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollMeasurePoints", reflect.TypeOf((*MockApiClient)(nil).PollMeasurePoints), token, serverHost, measurePointIDs, startDate, endDate)
}

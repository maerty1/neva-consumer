// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/measure_points/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repositories/measure_points/repository.go -destination=internal/repositories/measure_points/mock_repository.go -package=measure_points
//

// Package measure_points is a generated GoMock package.
package measure_points

import (
	context "context"
	models "lers_integration_service/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindAccountsToSync mocks base method.
func (m *MockRepository) FindAccountsToSync(ctx context.Context) ([]models.AccountToSync, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccountsToSync", ctx)
	ret0, _ := ret[0].([]models.AccountToSync)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccountsToSync indicates an expected call of FindAccountsToSync.
func (mr *MockRepositoryMockRecorder) FindAccountsToSync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccountsToSync", reflect.TypeOf((*MockRepository)(nil).FindAccountsToSync), ctx)
}

// FindPollSessionsToRetry mocks base method.
func (m *MockRepository) FindPollSessionsToRetry(ctx context.Context, accountID int) ([]PollSessionsToRetry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPollSessionsToRetry", ctx, accountID)
	ret0, _ := ret[0].([]PollSessionsToRetry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPollSessionsToRetry indicates an expected call of FindPollSessionsToRetry.
func (mr *MockRepositoryMockRecorder) FindPollSessionsToRetry(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPollSessionsToRetry", reflect.TypeOf((*MockRepository)(nil).FindPollSessionsToRetry), ctx, accountID)
}

// FindPollSessionsToRetry2 mocks base method.
func (m *MockRepository) FindPollSessionsToRetry2(ctx context.Context, accountID int) ([]PollSessionsToRetry2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPollSessionsToRetry2", ctx, accountID)
	ret0, _ := ret[0].([]PollSessionsToRetry2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPollSessionsToRetry2 indicates an expected call of FindPollSessionsToRetry2.
func (mr *MockRepositoryMockRecorder) FindPollSessionsToRetry2(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPollSessionsToRetry2", reflect.TypeOf((*MockRepository)(nil).FindPollSessionsToRetry2), ctx, accountID)
}

// FindRetryPollSessions mocks base method.
func (m *MockRepository) FindRetryPollSessions(ctx context.Context, accountID int) ([]RetryPollSessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRetryPollSessions", ctx, accountID)
	ret0, _ := ret[0].([]RetryPollSessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRetryPollSessions indicates an expected call of FindRetryPollSessions.
func (mr *MockRepositoryMockRecorder) FindRetryPollSessions(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRetryPollSessions", reflect.TypeOf((*MockRepository)(nil).FindRetryPollSessions), ctx, accountID)
}

// GetLastMeasurePointDatetime mocks base method.
func (m *MockRepository) GetLastMeasurePointDatetime(ctx context.Context, measurePointID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastMeasurePointDatetime", ctx, measurePointID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastMeasurePointDatetime indicates an expected call of GetLastMeasurePointDatetime.
func (mr *MockRepositoryMockRecorder) GetLastMeasurePointDatetime(ctx, measurePointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastMeasurePointDatetime", reflect.TypeOf((*MockRepository)(nil).GetLastMeasurePointDatetime), ctx, measurePointID)
}

// InsertMeasurePoint mocks base method.
func (m *MockRepository) InsertMeasurePoint(ctx context.Context, accountID, measurePointID int, title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMeasurePoint", ctx, accountID, measurePointID, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMeasurePoint indicates an expected call of InsertMeasurePoint.
func (mr *MockRepositoryMockRecorder) InsertMeasurePoint(ctx, accountID, measurePointID, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMeasurePoint", reflect.TypeOf((*MockRepository)(nil).InsertMeasurePoint), ctx, accountID, measurePointID, title)
}

// InsertMeasurePointData mocks base method.
func (m *MockRepository) InsertMeasurePointData(ctx context.Context, measurePointID int, datetime, values string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMeasurePointData", ctx, measurePointID, datetime, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMeasurePointData indicates an expected call of InsertMeasurePointData.
func (mr *MockRepositoryMockRecorder) InsertMeasurePointData(ctx, measurePointID, datetime, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMeasurePointData", reflect.TypeOf((*MockRepository)(nil).InsertMeasurePointData), ctx, measurePointID, datetime, values)
}

// InsertMeasurePointPollLog mocks base method.
func (m *MockRepository) InsertMeasurePointPollLog(ctx context.Context, pollID, measurePointID, accountID int, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMeasurePointPollLog", ctx, pollID, measurePointID, accountID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMeasurePointPollLog indicates an expected call of InsertMeasurePointPollLog.
func (mr *MockRepositoryMockRecorder) InsertMeasurePointPollLog(ctx, pollID, measurePointID, accountID, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMeasurePointPollLog", reflect.TypeOf((*MockRepository)(nil).InsertMeasurePointPollLog), ctx, pollID, measurePointID, accountID, message)
}

// InsertMeasurePointPollRetry mocks base method.
func (m *MockRepository) InsertMeasurePointPollRetry(ctx context.Context, originalPollID, retryPollID int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMeasurePointPollRetry", ctx, originalPollID, retryPollID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMeasurePointPollRetry indicates an expected call of InsertMeasurePointPollRetry.
func (mr *MockRepositoryMockRecorder) InsertMeasurePointPollRetry(ctx, originalPollID, retryPollID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMeasurePointPollRetry", reflect.TypeOf((*MockRepository)(nil).InsertMeasurePointPollRetry), ctx, originalPollID, retryPollID, status)
}

// InsertSyncLog mocks base method.
func (m *MockRepository) InsertSyncLog(ctx context.Context, accountID, measurePointID int, level, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSyncLog", ctx, accountID, measurePointID, level, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSyncLog indicates an expected call of InsertSyncLog.
func (mr *MockRepositoryMockRecorder) InsertSyncLog(ctx, accountID, measurePointID, level, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSyncLog", reflect.TypeOf((*MockRepository)(nil).InsertSyncLog), ctx, accountID, measurePointID, level, message)
}

// UpdatePollStatus mocks base method.
func (m *MockRepository) UpdatePollStatus(ctx context.Context, pollID int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePollStatus", ctx, pollID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePollStatus indicates an expected call of UpdatePollStatus.
func (mr *MockRepositoryMockRecorder) UpdatePollStatus(ctx, pollID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePollStatus", reflect.TypeOf((*MockRepository)(nil).UpdatePollStatus), ctx, pollID, status)
}

// UpdateRetryPollStatus mocks base method.
func (m *MockRepository) UpdateRetryPollStatus(ctx context.Context, retryPoll RetryPollSessions, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRetryPollStatus", ctx, retryPoll, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRetryPollStatus indicates an expected call of UpdateRetryPollStatus.
func (mr *MockRepositoryMockRecorder) UpdateRetryPollStatus(ctx, retryPoll, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetryPollStatus", reflect.TypeOf((*MockRepository)(nil).UpdateRetryPollStatus), ctx, retryPoll, status)
}
